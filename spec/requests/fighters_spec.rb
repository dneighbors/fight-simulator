require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/fighters", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Fighter. As you add validations to Fighter, be sure to
  # adjust the attributes here as well.
  valid_attributes = {
    name: "Deke Neighbors",
    nickname: "Dekealicious",
    birthplace: "Hells Kitchen",
    punch: 15,
    strength: 15,
    endurance: 100,
    speed: 15,
    dexterity: 15
  }


  describe "GET /index" do
    it "renders a successful response" do
      Fighter.create! valid_attributes
      get fighters_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      fighter = Fighter.create! valid_attributes
      get fighter_url(fighter)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_fighter_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      fighter = Fighter.create! valid_attributes
      get edit_fighter_url(fighter)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Fighter" do
        expect {
          post fighters_url, params: { fighter: valid_attributes }
        }.to change(Fighter, :count).by(1)
      end

      it "redirects to the created fighter" do
        post fighters_url, params: { fighter: valid_attributes }
        expect(response).to redirect_to(fighters_url)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested fighter" do
        fighter = Fighter.create! valid_attributes
        patch fighter_url(fighter), params: { fighter: new_attributes }
        fighter.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the fighter" do
        fighter = Fighter.create! valid_attributes
        patch fighter_url(fighter), params: { fighter: new_attributes }
        fighter.reload
        expect(response).to redirect_to(fighter_url(fighter))
      end
    end

  end

  describe "DELETE /destroy" do
    it "destroys the requested fighter" do
      fighter = Fighter.create! valid_attributes
      expect {
        delete fighter_url(fighter)
      }.to change(Fighter, :count).by(-1)
    end

    it "redirects to the fighters list" do
      fighter = Fighter.create! valid_attributes
      delete fighter_url(fighter)
      expect(response).to redirect_to(fighters_url)
    end
  end
end
